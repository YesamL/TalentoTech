# ===============================
# üîµ Chatbot - Calidad de Sue√±o en Streamlit Web
# ===============================

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report, confusion_matrix

# ======================================
# 1. üìå Cargar el conjunto de datos desde GitHub
# ======================================

url = 'https://raw.githubusercontent.com/YesamL/TalentoTech/main/data/Sleep_health_and_lifestyle_dataset.csv'

st.write("üîπ Cargando dataset...")
df = pd.read_csv(url)

feature_columns = ['Age', 'Sleep Duration', 'Physical Activity Level', 'Stress Level']
X = df[feature_columns]
y = df['Quality of Sleep']

# ======================================
# 2. üìå Preprocesamiento
# ======================================

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ======================================
# 3. üìå Entrenamiento del modelo
# ======================================

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# ======================================
# 4. üìå Evaluaci√≥n del modelo
# ======================================

st.subheader("üìà Evaluaci√≥n del Modelo de Predicci√≥n")
cv_scores = cross_val_score(model, X_scaled, y, cv=5)
st.write(f"üîµ Precisi√≥n promedio con validaci√≥n cruzada: {np.mean(cv_scores):.2f}")

y_pred = model.predict(X_test)
st.write("üîµ Matriz de Confusi√≥n:")
st.text(confusion_matrix(y_test, y_pred))

st.write("üîµ Informe de Clasificaci√≥n:")
st.text(classification_report(y_test, y_pred))

# ======================================
# 5. üìå Chatbot de predicci√≥n interactiva
# ======================================

st.title("ü§ñ Asistente de Calidad del Sue√±o - TalentoTech üí§")

st.write("Completa los siguientes datos para obtener una predicci√≥n:")

# --- Inputs visuales en la web ---
age = st.number_input("üìù ¬øQu√© edad tienes?", min_value=0, max_value=120, step=1)
sleep_duration = st.number_input("üõèÔ∏è ¬øCu√°ntas horas duermes por noche?", min_value=0.0, max_value=24.0, step=0.5)
physical_activity = st.number_input("üèÉ‚Äç‚ôÇÔ∏è ¬øCu√°ntos minutos de actividad f√≠sica haces por semana?", min_value=0, max_value=2000, step=10)
stress_level = st.slider("üò∞ ¬øNivel de estr√©s de 1 a 10?", min_value=1, max_value=10)

# Bot√≥n para predecir
if st.button("Predecir Calidad de Sue√±o"):
    # Crear dataframe del usuario
    user_data = pd.DataFrame([[age, sleep_duration, physical_activity, stress_level]], columns=feature_columns)
    
    # Escalar datos
    user_data_scaled = scaler.transform(user_data)

    # Hacer predicci√≥n
    predicted_quality = model.predict(user_data_scaled)[0]

    st.success(f"üåü Predicci√≥n de Calidad de Sue√±o: {predicted_quality}")

    # --- Consejos basados en la predicci√≥n ---
    st.subheader("üí° Consejos Personalizados:")
    if predicted_quality >= 8:
        st.info("¬°Excelente! Tu calidad de sue√±o es alta. Mant√©n tus h√°bitos saludables. üò¥‚ú®")
    elif predicted_quality >= 6:
        st.warning("Tu sue√±o es aceptable, pero podr√≠as mejorarlo un poco.")
        if sleep_duration < 7:
            st.write("- Intenta dormir al menos entre 7 y 9 horas.")
        if physical_activity < 150:
            st.write("- Aumenta tu actividad f√≠sica semanal para mejorar el descanso.")
        if stress_level > 5:
            st.write("- Considera t√©cnicas para reducir el estr√©s como meditaci√≥n o ejercicio moderado.")
    else:
        st.error("Tu calidad de sue√±o parece baja. ¬°Es momento de cuidar tu descanso!")
        if sleep_duration < 7:
            st.write("- Aumenta tus horas de sue√±o diario.")
        if physical_activity < 150:
            st.write("- Haz m√°s actividad f√≠sica para mejorar tu estado de √°nimo y descanso.")
        if stress_level > 5:
            st.write("- Busca maneras de controlar el estr√©s: yoga, respiraci√≥n, pausas activas.")


